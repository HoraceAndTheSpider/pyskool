#!/usr/bin/env bash
set -e # Abort on errors

PSTMPDIR=$HOME/tmp
COMMANDS=$(echo {skool_daze{,_take_too},back_to_skool{,_daze},ezad_looks}.py)
SHARE=/usr/share/pyskool
APPDATA=/usr/share/appdata/pyskool.appdata.xml

COMMON_IMAGES=$(echo {font,sprites}.png)
SKOOL_DAZE_IMAGES=$(echo {bubble,logo,{message_,lesson_,score}box,{mutables,skool}{,_ink,_paper}}.png)
BACK_TO_SKOOL_IMAGES=$(echo {bubble,inventory,logo,{message_,lesson_,score}box,{mutables,skool}{,_ink,_paper}}.png)
SKOOL_DAZE_TAKE_TOO_IMAGES=logo.png
BACK_TO_SKOOL_DAZE_IMAGES=$(echo {logo,{mutables,skool}{,_ink,_paper}}.png)
EZAD_LOOKS_IMAGES=$(echo {logo,{mutables,skool}{,_ink,_paper}}.png)

COMMON_SOUNDS="catapult.wav knocked-out.ogg"
SKOOL_DAZE_SOUNDS=$(echo {all-shields,bell,lines{1,2},shield,tune}.ogg {{hit,walk}{0,1},jump}.wav)
BACK_TO_SKOOL_SOUNDS=$(echo {bell,bingo,conker,lines{1,2},mouse,safe-key,sherry,tune,up-a-year}.ogg walk{0,1,2,3}.wav)
SKOOL_DAZE_TAKE_TOO_SOUNDS=$(echo {all-shields,open-safe,tune,up-a-year}.ogg)
BACK_TO_SKOOL_DAZE_SOUNDS=$(echo {all-shields,open-safe,tune,up-a-year}.ogg)
EZAD_LOOKS_SOUNDS=$(echo {all-shields,open-safe,tune,up-a-year}.ogg)

INI_FILES=$(echo {command_lists,config,font,lessons,messages,skool,sprites}.ini)

###############################################################################
# Check required environment variables
###############################################################################
_require_pyskool() {
  if [ -z "$PYSKOOL_HOME" ]; then
    echo "Error: PYSKOOL_HOME not defined."
    exit 1
  fi
  if [ ! -d "$PYSKOOL_HOME" ]; then
    echo "Error: directory not found: $PYSKOOL_HOME"
    exit 1
  fi
  TOOLS=$PYSKOOL_HOME/utils
  VERSION=$($PYSKOOL_HOME/pyskool.py --version 2>&1)
  TARBALL=$PYSKOOL_HOME/dist/pyskool-$VERSION.tar.xz
  cd $PYSKOOL_HOME
  PREV_VERSION=$(git tag | tail -n 1 | cut -c2-)
}

_require_pyskool_archive() {
  if [ -z "$PYSKOOL_ARCHIVE" ]; then
    echo 'PYSKOOL_ARCHIVE is not set; aborting'
    exit 1
  fi
  if [ ! -d "$PYSKOOL_ARCHIVE" ]; then
    echo "PYSKOOL_ARCHIVE=$PYSKOOL_ARCHIVE: directory not found"
    exit 1
  fi
}

_require_skoolkit() {
  if [ -z "$SKOOLKIT_HOME" ]; then
    echo "Error: SKOOLKIT_HOME not defined."
    exit 1
  fi
  if [ ! -d "$SKOOLKIT_HOME" ]; then
    echo "Error: directory not found: $SKOOLKIT_HOME"
    exit 1
  fi
}

###############################################################################
# Utility functions
###############################################################################
_exec() {
  message=$1
  command=$2
  logfile=$3
  failcode=$4

  echo -n "${message}: "
  if ! $command &> $logfile; then
    if [[ -z "$failcode" ]] || [[ $? -eq "$failcode" ]]; then
      echo "FAILED (see $logfile)"
      return 1
    fi
  fi
  echo "OK"
}

_cd_tmpdir() {
  mkdir -p $PSTMPDIR
  cd $(mktemp -d --tmpdir=$PSTMPDIR)
}

_create_venv() {
  venvdir=${1:-venv}

  _exec "Creating virtual environment" "virtualenv --system-site-packages $venvdir" $(pwd)/venv.log
}

_build_tarball() {
  echo -n "Building $(basename $TARBALL): "
  $TOOLS/mkpstarball -q -t
  echo "OK"
}

_check_commands() {
  path=$1
  logdir=$2

  for cmdname in $COMMANDS; do
    echo -n "Running '$cmdname --help': "
    cmd=$path/$cmdname
    if [[ ! -f $cmd ]]; then
      echo "FAILED ($cmd not found)"
      return 1
    fi
    logfile=$logdir/$(basename $cmdname .py)-help.log
    $cmd --help &> $logfile || :
    firstword=$(head -n 1 $logfile | cut -f1 -d' ')
    if [[ "$firstword" != "usage:" ]]; then
      echo "FAILED (see $logfile)"
      return 1
    fi
    echo "OK"
  done
}

_check_man_pages() {
  echo -n "Checking man pages: "
  for cmdname in $COMMANDS; do
    manpage=/usr/share/man/man6/$cmdname.6.gz
    if [[ ! -f $manpage ]]; then
      echo "FAILED ($manpage not found)"
      return 1
    fi
  done
  echo "OK"
}

_check_files() {
  filetype=$1
  expdir=$2
  logdir=$3
  shift 3
  expfiles=$*

  echo -n "Checking $filetype: "
  if [[ ! -d $expdir ]]; then
    echo "FAILED ($expdir does not exist)"
    return 1
  fi
  rcount=0
  for f in $expfiles; do
    resource=$expdir/$f
    if [[ ! -f $resource ]]; then
      echo "FAILED ($f not found in $expdir)"
      return 1
    fi
    let rcount+=1
  done
  rlist=$logdir/$(echo $filetype | tr ' ' _).txt
  ls -1 $expdir > $rlist
  numresources=$(cat $rlist | grep -Ev '^(images|ini|sounds)$' | wc -l)
  if [[ $numresources -ne $rcount ]]; then
    echo "FAILED (unexpected files found; see $rlist)"
    return 1
  fi
  echo "OK"
}

_check_data() {
  rootdir=$1
  logdir=$2

  _check_files data $rootdir $logdir {images,pyskool}.ini
}

_check_images() {
  logdir=$1

  imagesdir=$SHARE/images/originalx1

  _check_files "icon" $SHARE $logdir icon.png
  _check_files "common images" $imagesdir/common $logdir $COMMON_IMAGES
  _check_files "Skool Daze images" $imagesdir/skool_daze $logdir $SKOOL_DAZE_IMAGES
  _check_files "Back to Skool images" $imagesdir/back_to_skool $logdir $BACK_TO_SKOOL_IMAGES
  _check_files "Skool Daze Take Too images" $imagesdir/skool_daze_take_too $logdir $SKOOL_DAZE_TAKE_TOO_IMAGES
  _check_files "Back to Skool Daze images" $imagesdir/back_to_skool_daze $logdir $BACK_TO_SKOOL_DAZE_IMAGES
  _check_files "Ezad Looks images" $imagesdir/ezad_looks $logdir $EZAD_LOOKS_IMAGES
}

_check_sounds() {
  logdir=$1

  soundsdir=$SHARE/sounds

  _check_files "common sounds" $soundsdir/common $logdir $COMMON_SOUNDS
  _check_files "Skool Daze sounds" $soundsdir/skool_daze $logdir $SKOOL_DAZE_SOUNDS
  _check_files "Back to Skool sounds" $soundsdir/back_to_skool $logdir $BACK_TO_SKOOL_SOUNDS
  _check_files "Skool Daze Take Too sounds" $soundsdir/skool_daze_take_too $logdir $SKOOL_DAZE_TAKE_TOO_SOUNDS
  _check_files "Back to Skool Daze sounds" $soundsdir/back_to_skool_daze $logdir $BACK_TO_SKOOL_DAZE_SOUNDS
  _check_files "Ezad Looks sounds" $soundsdir/ezad_looks $logdir $EZAD_LOOKS_SOUNDS
}

_check_ini_files() {
  logdir=$1

  inidir=$SHARE/ini

  _check_files "Skool Daze ini files" $inidir/skool_daze $logdir $INI_FILES
  _check_files "Back to Skool ini files" $inidir/back_to_skool $logdir $INI_FILES
  _check_files "Skool Daze Take Too ini files" $inidir/skool_daze_take_too $logdir $INI_FILES
  _check_files "Back to Skool Daze ini files" $inidir/back_to_skool_daze $logdir $INI_FILES
  _check_files "Ezad Looks ini files" $inidir/ezad_looks $logdir $INI_FILES
}

_check_assets() {
  logdir=$1

  _check_images $logdir
  _check_sounds $logdir
  _check_ini_files $logdir
}

_check_appdata() {
  echo -n "Checking $(basename $APPDATA): "
  if [[ ! -f $APPDATA ]]; then
    echo "FAILED ($APPDATA not found)"
    return 1
  fi
  echo "OK"
}

_check_setup() {
  path=$1
  logdir=$2

  for cmdname in $COMMANDS; do
    logfile=$logdir/$(basename $cmdname .py)-setup.log
    _exec "Running '$cmdname --setup'" "$path/$cmdname --setup" $logfile
  done
}

_run_commands() {
  path=$1
  logdir=$2

  for cmdname in $COMMANDS; do
    logfile=$logdir/$(basename $cmdname .py).log
    _exec "Running $cmdname" "$path/$cmdname" $logfile
  done
}

###############################################################################
# Compare images with those in the previous version
###############################################################################
compare_images() {
  _require_pyskool
  _require_pyskool_archive
  _require_skoolkit

  _build_tarball
  _cd_tmpdir
  tar xf $PYSKOOL_ARCHIVE/pyskool-$PREV_VERSION.tar.xz
  tar xf $TARBALL
  cmd="$TOOLS/compare-images pyskool-$PREV_VERSION pyskool-$VERSION"
  logfile=$(pwd)/images.txt
  _exec "Comparing images with those in version $PREV_VERSION" "$cmd" $logfile
  [[ -s $logfile ]] && echo "Differences found (see $logfile)" || echo "No differences found"
}

###############################################################################
# Compare sounds with those in the previous version
###############################################################################
_create_sounds() {
  rootdir=$1
  version=$2

  for cmdname in $COMMANDS; do
    cmd="$rootdir/$cmdname --create-sounds"
    logfile=$(pwd)/$(basename $cmdname .py)-sounds-$version.txt
    _exec "Running '$cmdname --create-sounds' ($version)" "$cmd" $logfile
  done
  mv ~/.pyskool/sounds sounds-$version
}

compare_sounds() {
  _require_pyskool
  _require_pyskool_archive

  _cd_tmpdir

  [[ -d $HOME/.pyskool/sounds ]] && mv $HOME/.pyskool/sounds{,-backup}
  _create_sounds $PYSKOOL_HOME $VERSION
  tar xf $PYSKOOL_ARCHIVE/pyskool-$PREV_VERSION.tar.xz
  _create_sounds pyskool-$PREV_VERSION $PREV_VERSION
  [[ -d $HOME/.pyskool/sounds-backup ]] && mv $HOME/.pyskool/sounds{-backup,}

  cmd="$PYSKOOL_HOME/utils/compare-sounds sounds-$PREV_VERSION sounds-$VERSION"
  logfile=$(pwd)/sounds.txt
  _exec "Comparing sounds" "$cmd" $logfile
  [[ -s $logfile ]] && echo "Differences found (see $logfile)" || echo "No differences found"
}

###############################################################################
# Compare ini files with those in the previous version
###############################################################################
_create_ini() {
  rootdir=$1
  version=$2

  for cmdname in $COMMANDS; do
    cmd="$rootdir/$cmdname --create-ini"
    logfile=$(pwd)/$(basename $cmdname .py)-ini-$version.txt
    _exec "Running '$cmdname --create-ini' ($version)" "$cmd" $logfile
  done
  mv ~/.pyskool/ini ini-$version
}

compare_ini() {
  _require_pyskool
  _require_pyskool_archive

  _cd_tmpdir

  [[ -d $HOME/.pyskool/ini ]] && mv $HOME/.pyskool/ini{,-backup}
  _create_ini $PYSKOOL_HOME $VERSION
  tar xf $PYSKOOL_ARCHIVE/pyskool-$PREV_VERSION.tar.xz
  _create_ini pyskool-$PREV_VERSION $PREV_VERSION
  [[ -d $HOME/.pyskool/ini-backup ]] && mv $HOME/.pyskool/ini{-backup,}

  cmd="diff -ur ini-$PREV_VERSION ini-$VERSION"
  logfile=$(pwd)/ini.diff
  _exec "Comparing ini files" "$cmd" $logfile 2
  [[ -s $logfile ]] && echo "Differences found (see $logfile)" || echo "No differences found"
}

###############################################################################
# Verify that 'setup.py install' works
###############################################################################
_install_pyskool() {
  method=$1

  tar xf $TARBALL -C $topdir
  mv $topdir/pyskool-$VERSION{,-release}
  cd $topdir/pyskool-$VERSION-release

  if [[ "$method" = "2" ]]; then
    _exec "Building source distribution" "./setup.py sdist" $topdir/sdist.log
    tar xf dist/pyskool-$VERSION.tar.gz -C $topdir
    cd $topdir/pyskool-$VERSION
  fi

  _exec "Installing Pyskool" "$venv/bin/python setup.py install" $topdir/install.log
}

verify_setup() {
  method=$1

  _require_pyskool

  _build_tarball
  _cd_tmpdir
  topdir=$(pwd)
  venv=$topdir/venv
  _create_venv $venv
  _install_pyskool $method
  _check_commands $venv/bin $topdir
  packagedir=$($venv/bin/skool_daze.py --package-dir)
  _check_data $packagedir/data $topdir

  [[ -d $HOME/.pyskool ]] && mv $HOME/.pyskool{,-backup}

  _check_setup $venv/bin $topdir
  _run_commands $venv/bin $topdir

  rm -rf $HOME/.pyskool
  [[ -d $HOME/.pyskool-backup ]] && mv $HOME/.pyskool{-backup,}
}

###############################################################################
# Build, install, verify and uninstall a DEB package
###############################################################################
build_deb() {
  _require_pyskool

  debname=pyskool_$VERSION-1_all.deb
  deb=$PYSKOOL_HOME/dist/$debname
  logdir=$PYSKOOL_HOME/dist/log
  mkdir -p $logdir

  sudo dpkg -r pyskool &> /dev/null

  _exec "Building $debname" "make -C $PYSKOOL_HOME deb" $logdir/debuild.log
  _exec "Installing $debname" "sudo dpkg -i $deb" $logdir/dpkg-i.log
  _check_commands /usr/games $logdir
  _check_man_pages
  _check_data $(/usr/games/skool_daze.py --package-dir)/data $logdir
  _check_assets $logdir
  _check_appdata

  [[ -d $HOME/.pyskool ]] && rm -rf $HOME/.pyskool-backup && mv $HOME/.pyskool{,-backup}
  _run_commands /usr/games $logdir
  rm -rf $HOME/.pyskool
  [[ -d $HOME/.pyskool-backup ]] && mv $HOME/.pyskool{-backup,}

  _exec "Uninstalling pyskool" "sudo dpkg -r pyskool" $logdir/dpkg-r.log
}

###############################################################################
# Build, install, verify and uninstall an RPM package
###############################################################################
build_rpm() {
  _require_pyskool

  rpmname=pyskool-$VERSION-1.noarch.rpm
  rpm=$PYSKOOL_HOME/dist/$rpmname
  logdir=$PYSKOOL_HOME/dist/log
  mkdir -p $logdir

  sudo rpm -e pyskool &> /dev/null || true

  _exec "Building $rpmname" "make -C $PYSKOOL_HOME rpm" $logdir/rpmbuild.log
  _exec "Installing $rpmname" "sudo rpm -i $rpm" $logdir/rpm-i.log
  _check_commands /usr/bin $logdir
  _check_man_pages
  _check_data $(/usr/bin/skool_daze.py --package-dir)/data $logdir
  _check_assets $logdir
  _check_appdata

  [[ -d $HOME/.pyskool ]] && rm -rf $HOME/.pyskool-backup && mv $HOME/.pyskool{,-backup}
  _run_commands /usr/bin $logdir
  rm -rf $HOME/.pyskool
  [[ -d $HOME/.pyskool-backup ]] && mv $HOME/.pyskool{-backup,}

  _exec "Uninstalling pyskool" "sudo rpm -e pyskool" $logdir/rpm-e.log
}

###############################################################################
# Prepare documentation on the gh-pages branch
###############################################################################
prepare_gh_pages() {
  _require_pyskool

  _cd_tmpdir
  logfile=$(pwd)/sphinx.log
  echo -n "Cloning pyskool repository: "
  git clone -q https://github.com/skoolkid/pyskool
  echo "OK"
  cd pyskool
  sed -i 's/^\(SPHINXOPTS.*=\)$/\1 -D html_theme=sphinxdoc/' sphinx/Makefile
  _exec "Building documentation" "make -C sphinx html" $logfile
  git checkout -- sphinx/Makefile
  rm -rf sphinx/build/html/{.buildinfo,objects.inv}
  git checkout -q gh-pages
  rsync -ac sphinx/build/html/ . # compare files by checksum - important!
  rm -rf pyskool sphinx
  echo
  git status -bs
  cat <<EOM

Now:
  \$ cd $(pwd)
  # Remove any pages that are no longer used
  # Add any new pages or files
  \$ git commit -am "Update Pyskool documentation to $VERSION"
  \$ git push origin gh-pages
EOM
}

###############################################################################
# Build a source package for uploading to PyPI
###############################################################################
build_sdist() {
  _require_pyskool

  [[ -f $TARBALL ]] && echo "Found $TARBALL" || _build_tarball
  _cd_tmpdir
  logfile=$(pwd)/sdist.log
  tar xf $TARBALL
  cd pyskool-$VERSION
  _exec "Building source package" "./setup.py sdist" $logfile
  sdist=pyskool-$VERSION.tar.gz
  mv dist/$sdist $PYSKOOL_HOME/dist
  echo "Now upload $PYSKOOL_HOME/dist/$sdist to PyPI"
}

###############################################################################
# Verify that Pyskool can be installed from PyPI
###############################################################################
check_pypi() {
  _cd_tmpdir
  _create_venv
  _exec "Installing Pyskool from PyPI" "venv/bin/pip install pyskool" $(pwd)/install.log

  [[ -d $HOME/.pyskool ]] && mv $HOME/.pyskool{,-backup}
  _check_setup venv/bin $(pwd)
  _run_commands venv/bin $(pwd)
  rm -rf $HOME/.pyskool
  [[ -d $HOME/.pyskool-backup ]] && mv $HOME/.pyskool{-backup,}
}

###############################################################################
# Build a documentation zip archive for PyPI
###############################################################################
build_doczip() {
  _require_pyskool

  mkdir -p $PYSKOOL_HOME/dist
  zipfile=$PYSKOOL_HOME/dist/pyskool-$VERSION-docs.zip

  _cd_tmpdir
  echo -n "Cloning local git repository: "
  git clone -ql $PYSKOOL_HOME
  echo "OK"
  logfile=$(pwd)/sphinx.log
  cd pyskool/sphinx
  sed -i 's/^\(SPHINXOPTS.*=\)$/\1 -D html_theme=nature/' Makefile
  _exec "Building documentation" "make html" $logfile
  cd build/html
  rm -f .buildinfo objects.inv $zipfile
  echo -n "Building zip archive: "
  zip -9qr $zipfile .
  echo "OK"
  echo "Now upload $zipfile to PyPI"
}

###############################################################################
# Print usage information
###############################################################################
usage() {
  cat >&2 <<EOM
Usage: $(basename $0) COMMAND [COMMAND...]

Pyskool testing and release tool.

Pre-release commands:
  cmpimg - compare images with those in the previous version
  cmpsnd - compare sounds with those in the previous version
  cmpini - compare ini files with those in the previous version
  setup1 - verify that 'setup.py install' works from a release tarball
  setup2 - verify that 'setup.py install' works from an sdist tarball

Post-release commands:
  debpkg - build, install, verify and uninstall a DEB package
  rpmpkg - build, install, verify and uninstall an RPM package
  ghdocs - prepare documentation on the gh-pages branch
  bsdist - build a source package for uploading to PyPI
  ifpypi - verify that Pyskool can be installed from PyPI
  doczip - build a documentation zip archive for PyPI
EOM
}

###############################################################################
# Parse command line
###############################################################################
[[ -z "$1" ]] && usage
numcommands=$#

while [[ -n "$1" ]]; do
  [[ $numcommands -ge 2 ]] && echo "*** Running command '$1' ***"
  case "$1" in
    cmpimg) compare_images ;;
    cmpsnd) compare_sounds ;;
    cmpini) compare_ini ;;
    setup1) verify_setup 1 ;;
    setup2) verify_setup 2 ;;
    debpkg) build_deb ;;
    rpmpkg) build_rpm ;;
    ghdocs) prepare_gh_pages ;;
    bsdist) build_sdist ;;
    ifpypi) check_pypi ;;
    doczip) build_doczip ;;
         *) echo "*** Unknown command '$1' ***"; usage ;;
  esac
  shift
done
